(defn p058 []
  (->> (iterate (partial + 2) 2)
                                        ;2 4 6 8 10 ...
       (mapcat #(repeat 4 %))
                                        ; 2 2 2 2 4 4 4 4 6 6 6 6 8 8 8 8 ...
       (reductions + 1)
                                        ; 1 3 5 7 9 13 17 21 25 ...
       (rest)
                                        ; 3 5 7 9 13 17 21 25 ...
                                        ; now the seq has every corner number of squares in spiral

       (map #(.isProbablePrime (biginteger %) 6))

                                        ; the 2nd parameter is the certainty of the test
                                        ; the higher it goes, the more accurate the answer is
                                        ; true true true false ...
       (map #(if (true? %) 1 0))
                                        ; 1 1 1 0 ...
       (reductions + 0)
                                        ; 0 1 2 3 3 ...
       (map #(/ %2 %1) (rest (range)))
                                        ; 0/1 1/2 2/3 3/4 3/5 ...
       (rest)
                                        ; 1/2 2/3 3/4 3/5 ...
       (partition 4)
                                        ; (1/2 2/3 3/4 3/5) ...
       (map last)
                                        ; 3/5 ...
                                        ; now the seq has the ratio of primes along diagonal
                                        ; starting from side length = 3, 5, 7 ...

       (map #(vector %1 %2) (iterate (partial + 2) 3))

                                        ; [3 3/5] [5 5/9] [7 8/13] [9 9/17] ...
                                        ; [ side length , ratio of primes along diagonal]
       (filter #(< (second %) 0.1))

                                        ; filter the answer
       (ffirst)))
